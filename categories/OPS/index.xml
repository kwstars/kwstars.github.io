<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OPS on Kira's blog</title><link>https://linux88.com/categories/OPS/</link><description>Recent content in OPS on Kira's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 11 Jan 2022 16:12:04 +0800</lastBuildDate><atom:link href="https://linux88.com/categories/OPS/index.xml" rel="self" type="application/rss+xml"/><item><title>使用Wireshark抓取Redis协议包</title><link>https://linux88.com/post/OPS/%E4%BD%BF%E7%94%A8Wireshark%E6%8A%93%E5%8F%96Redis%E5%8D%8F%E8%AE%AE%E5%8C%85/</link><pubDate>Tue, 11 Jan 2022 16:12:04 +0800</pubDate><guid>https://linux88.com/post/OPS/%E4%BD%BF%E7%94%A8Wireshark%E6%8A%93%E5%8F%96Redis%E5%8D%8F%E8%AE%AE%E5%8C%85/</guid><description>建立连接 1 2 3 4 5 6 7 8 9 10 11 func main() { rdb := redis.NewClient(&amp;amp;redis.Options{ Network: &amp;#34;&amp;#34;, Addr: &amp;#34;192.168.0.100:6379&amp;#34;, DB: 8, Password: &amp;#34;b62uHm3eFEUZkF4z&amp;#34;, }) defer rdb.Close() rdb.Ping(ctx) } Pipeline 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 func main() { rdb := redis.NewClient(&amp;amp;redis.Options{ Network: &amp;#34;&amp;#34;, Addr: &amp;#34;192.168.0.100:6379&amp;#34;, DB: 8, Password: &amp;#34;b62uHm3eFEUZkF4z&amp;#34;, }) defer rdb.Close() rdb.HSet(ctx, &amp;#34;hash:kira&amp;#34;, &amp;#34;a&amp;#34;, 1) rdb.HSet(ctx, &amp;#34;hash:kira&amp;#34;, &amp;#34;b&amp;#34;, 1) rdb.HSet(ctx, &amp;#34;hash:kira&amp;#34;, &amp;#34;c&amp;#34;, 1) pipeline := rdb.Pipeline() defer pipeline.Close() pipeline.HIncrBy(ctx, &amp;#34;hash:kira&amp;#34;, &amp;#34;a&amp;#34;, 1) pipeline.HIncrBy(ctx,</description></item><item><title>Disable Transparent Huge Pages (THP)</title><link>https://linux88.com/post/OPS/Disable_Transparent_Huge_Pages/</link><pubDate>Tue, 06 Jul 2021 12:25:37 +0800</pubDate><guid>https://linux88.com/post/OPS/Disable_Transparent_Huge_Pages/</guid><description>Disable Transparent Huge Pages (THP)</description></item><item><title>Google Doc 几个小技巧</title><link>https://linux88.com/post/OPS/Google-Doc-%E5%87%A0%E4%B8%AA%E5%B0%8F%E6%8A%80%E5%B7%A7/</link><pubDate>Sat, 22 May 2021 21:59:52 +0800</pubDate><guid>https://linux88.com/post/OPS/Google-Doc-%E5%87%A0%E4%B8%AA%E5%B0%8F%E6%8A%80%E5%B7%A7/</guid><description>手写输入特殊字符 插入 -&amp;gt; 特殊字符 插入搜索链接 ctrl + k 会自动搜索豆瓣， gitbook的链接 添加脚注 ctrl + alt + f 点右下角探索，搜索后可以添加脚注 搜索图片后文字绕开 链接直接拖到文档 插件画图Mermaid Add-ons -&amp;gt; Mermaid 插件</description></item><item><title>MicroK8s</title><link>https://linux88.com/post/OPS/MicroK8s/</link><pubDate>Wed, 18 Nov 2020 09:46:33 +0800</pubDate><guid>https://linux88.com/post/OPS/MicroK8s/</guid><description>一、安装MicroK8s 1.1 安装 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 安装MicroK8s sudo snap install microk8s --classic --channel=1.19 # 查所有MicroK8s的版本 snap info microk8s # 加入用户组并对会话刷新 sudo usermod -a -G microk8s $USER sudo chown -f -R $USER ~/.kube su - $USER</description></item><item><title>LinuxShell快捷键</title><link>https://linux88.com/post/OPS/LinuxShell%E5%BF%AB%E6%8D%B7%E9%94%AE/</link><pubDate>Tue, 10 Nov 2020 16:10:33 +0800</pubDate><guid>https://linux88.com/post/OPS/LinuxShell%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid><description>光标移动操作 ctrl + a：移动到最前面 ctrl + e：移动到最后面 ctrl + b：光标向前移动一格 ctrl + f：光标向后移动一格 删除操作 ctrl + q：删除所有内容 ctrl + u：删除所有内容并复制 ctrl + k：删除光标处到后面的所有内容 ctrl + w：删除</description></item><item><title>PicGo-Core 和 Typora</title><link>https://linux88.com/post/OPS/PicGo-Core%E5%92%8CTypora/</link><pubDate>Tue, 10 Nov 2020 15:26:31 +0800</pubDate><guid>https://linux88.com/post/OPS/PicGo-Core%E5%92%8CTypora/</guid><description>系统：Ubuntu 20.04 LTS 一、PicGo-Core 1.1 安装npm 1 sudo apt install npm -y 1.2 切换npm的源 1 sudo npm install -g cnpm --registry=https://registry.npm.taobao.org 1.3 安装PicGo-Croe 1 sudo cnpm install picgo -g 1.4 生成配置文件 Imgur图床的配置方法 PicGo-Core通过</description></item><item><title>查找Remmina的密码</title><link>https://linux88.com/post/OPS/%E4%BB%8EUbuntu%E8%AE%BF%E9%97%AEMac/</link><pubDate>Tue, 10 Nov 2020 15:20:29 +0800</pubDate><guid>https://linux88.com/post/OPS/%E4%BB%8EUbuntu%E8%AE%BF%E9%97%AEMac/</guid><description>Seshorse 可以管理 GNOME Keyring。 1 2 3 4 5 # 安装 sudo apt-get install seahorse # 运行 seahorse 查找远程管理工具 Remmina 密码的保存位置</description></item><item><title>查找Remmina的密码</title><link>https://linux88.com/post/OPS/%E6%9F%A5%E6%89%BERemmina%E7%9A%84%E5%AF%86%E7%A0%81/</link><pubDate>Tue, 10 Nov 2020 15:20:29 +0800</pubDate><guid>https://linux88.com/post/OPS/%E6%9F%A5%E6%89%BERemmina%E7%9A%84%E5%AF%86%E7%A0%81/</guid><description>Seshorse 可以管理 GNOME Keyring。 1 2 3 4 5 # 安装 sudo apt-get install seahorse # 运行 seahorse 查找远程管理工具 Remmina 密码的保存位置</description></item><item><title>UFW</title><link>https://linux88.com/post/OPS/UFW/</link><pubDate>Sun, 04 Oct 2020 18:16:12 +0800</pubDate><guid>https://linux88.com/post/OPS/UFW/</guid><description>一、UFW介绍 下文引用自Wikipedia UFW全称为Uncomplicated Firewall[1]，是Ubuntu系统上默认的防火墙组件，为了轻量化配置iptables而开发的一款工具。UFW提供</description></item><item><title>Docker和docker Compose的安装与配置</title><link>https://linux88.com/post/OPS/Docker%E5%92%8Cdocker-compose%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</link><pubDate>Sun, 03 Nov 2019 19:34:51 +0800</pubDate><guid>https://linux88.com/post/OPS/Docker%E5%92%8Cdocker-compose%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</guid><description>一、安装 1.1 安装docker 安装前准备 1 2 3 4 5 6 # 关闭selinux, 一定要重启 sed -i &amp;#39;s#SELINUX=enforcing#SELINUX=disabled#g&amp;#39; /etc/selinux/config # CentOS7修改docker源 sudo yum install -y yum-utils sudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo 根据不同的系统版本安装 Docker Engine 1.2 安装docekr-compose</description></item><item><title>Rsync</title><link>https://linux88.com/post/OPS/rsync/</link><pubDate>Thu, 03 Oct 2019 10:20:50 +0800</pubDate><guid>https://linux88.com/post/OPS/rsync/</guid><description>一、基本配置 Server端配置 安装rsync 1 yum install -y rsync 配置rsync 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 # cat /etc/rsyncd.conf # /etc/rsyncd: configuration file for rsync daemon mode # See rsyncd.conf man page for more options. # configuration example: # uid =</description></item><item><title>SVN</title><link>https://linux88.com/post/OPS/svn/</link><pubDate>Sat, 24 Nov 2018 18:26:07 +0800</pubDate><guid>https://linux88.com/post/OPS/svn/</guid><description>回退到某个版本 1 2 3 4 5 # 从修订版150（当前）回到修订版140 svn update svn log -l 5 svn merge -r 150:140 . svn commit -m &amp;#34;Rolled back to r140&amp;#34;</description></item><item><title>Linux Commands</title><link>https://linux88.com/post/OPS/LinuxCommand/</link><pubDate>Mon, 06 Nov 2017 10:57:38 +0800</pubDate><guid>https://linux88.com/post/OPS/LinuxCommand/</guid><description>查找替换多个文件 1 grep -rl &amp;#34;old_string&amp;#34; . | xargs sed -i &amp;#39;s/old_string/new_string/g&amp;#39; grep -rl: 递归搜索，仅打印包含“ old_string”的文件 xargs: 接受grep命令的输出，并使其成为下一个命令（即sed命令）的输入 sed -i ‘s/old_string/new_s</description></item></channel></rss>