<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on Kira's blog</title><link>https://www.linux88.com/tags/Go/</link><description>Recent content in Go on Kira's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 01 Sep 2021 14:44:15 +0800</lastBuildDate><atom:link href="https://www.linux88.com/tags/Go/index.xml" rel="self" type="application/rss+xml"/><item><title>Testing With Gomock</title><link>https://www.linux88.com/post/Go/testing-with-gomock/</link><pubDate>Wed, 01 Sep 2021 14:44:15 +0800</pubDate><guid>https://www.linux88.com/post/Go/testing-with-gomock/</guid><description/></item><item><title>Contexts and structs</title><link>https://www.linux88.com/post/Go/Contexts-and-structs/</link><pubDate>Sun, 11 Jul 2021 21:14:41 +0800</pubDate><guid>https://www.linux88.com/post/Go/Contexts-and-structs/</guid><description>此文为 Contexts and structs 译文 介绍 在许多Go API中，尤其是现代的API，函数和方法的第一个参数往往是context.Context。Context 提供了一种跨API边界和进程之间传输超时、取消和传递元数据信息。当</description></item><item><title>Garbage Collection Semantics</title><link>https://www.linux88.com/post/Go/Garbage-Collection-Semantics/</link><pubDate>Mon, 07 Jun 2021 18:15:52 +0800</pubDate><guid>https://www.linux88.com/post/Go/Garbage-Collection-Semantics/</guid><description>从1.12版本开始，go使用了一个非生成的、并发的、三色的、标记和清扫的收集器 Mark Setup 当一个垃圾收集开始时，必须执行的第一个活动是打开写屏障。 为了打开写屏障，每一个正在运行的应用程序的程序都必须停止。 在垃</description></item><item><title>Unsafe</title><link>https://www.linux88.com/post/Go/unsafe/</link><pubDate>Wed, 31 Mar 2021 14:42:09 +0800</pubDate><guid>https://www.linux88.com/post/Go/unsafe/</guid><description>Type-Unsafe Pointers 深度解密Go语言之unsafe</description></item><item><title>Goroutine并发控制</title><link>https://www.linux88.com/post/Go/goroutine%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</link><pubDate>Fri, 15 Jan 2021 20:57:51 +0800</pubDate><guid>https://www.linux88.com/post/Go/goroutine%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/</guid><description>此文为 Optimization for Number of goroutines Using Feedback Control 译文 Concurrency and complexity Concurrency and Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 func main() { var wg sync.WaitGroup sem := make(chan struct{}, 3) for i := 0; i &amp;lt; 10; i++ { wg.Add(1) sem &amp;lt;- struct{}{} go func() { defer wg.DonOptimization for Number of goroutines Using Feedback Controle() defer func() { &amp;lt;-sem }() task() }() } wg.Wait() close(sem) } 1 Concurrency and application 为了实现速度和稳定性，并发数</description></item><item><title>Go Build Flags</title><link>https://www.linux88.com/post/Go/flags/</link><pubDate>Wed, 13 Jan 2021 15:13:52 +0800</pubDate><guid>https://www.linux88.com/post/Go/flags/</guid><description>在构建时设置一个环境变量 一个非常方便的构建标志，允许你在构建时从命令行设置一个变量。看下面的例子。 1 2 3 4 5 6 7 8 9 10 11 package main import ( &amp;#34;fmt&amp;#34; ) var who string func main() { fmt.Printf(&amp;#34;Hello, %s\n&amp;#34;, who) } 使用默认值我们得到以下结果。 1 2 3 4 $ go run main.go Hello, 通</description></item><item><title>Slice Tricks</title><link>https://www.linux88.com/post/Go/slice%E6%80%A7%E8%83%BD/</link><pubDate>Tue, 12 Jan 2021 18:26:42 +0800</pubDate><guid>https://www.linux88.com/post/Go/slice%E6%80%A7%E8%83%BD/</guid><description>Slice Tricks Slice Tricks的图 Append 1 a = append(a, b...) Copy 1 2 3 4 5 6 b = make([]T, len(a)) copy(b, a) // 这两种方法往往比上面的方法慢一些，但如果复制后有更多的元素要附加到b上，效率会更高。 b = append([]T(nil), a...) b = append(a[:0:0], a...) Cut 1 a = append(a[:i], a[j:]...) Delete 1 2 3 a = append(a[:i], a[i+1:]...) // or a = a[:i+copy(a[i:],</description></item><item><title>LittleKnowledge</title><link>https://www.linux88.com/post/Go/LittleKnowledge/</link><pubDate>Tue, 03 Nov 2020 01:45:17 +0800</pubDate><guid>https://www.linux88.com/post/Go/LittleKnowledge/</guid><description>CGO_ENABLED动态链接 测试跳过 90000000打印为90,000,000 子context超时时间会覆上层的context超时 &amp;ndash;work flag打印位置 设置log日志格式 proto不删除字段, 而是保留 gRPC</description></item><item><title>Golang的环境变量</title><link>https://www.linux88.com/post/Go/Golang%E7%9A%84%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</link><pubDate>Sat, 10 Oct 2020 18:01:22 +0800</pubDate><guid>https://www.linux88.com/post/Go/Golang%E7%9A%84%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</guid><description>什么是环境变量 环境变量是系统级的键-值对，正在运行的进程可以访问它。这些通常用于使同一程序在不同的部署环境（例如PROD，DEV或TEST）中表现不同。在环境中存储配置是a twelve-factor app的原理之一。它使应用</description></item></channel></rss>